dnl $Id: configure.in,v 1.33 2001/12/30 15:32:51 tmm Exp $
dnl Process this file with autoconf to produce a configure script.
AC_INIT(src)

test -z "$CFLAGS" && CFLAGS="-O2 -g -Wall -Winline"

CFLAGS="$CFLAGS -D_REENTRANT -D_THREAD_SAFE -D_GNU_SOURCE -DCONFDIR=\"\\\"$sysconfdir\\\"\""

PACKAGE="pdnsd"
VERSION=`cat $srcdir/version`

distribution="Generic"
target="autodetect"
cachedir="/var/cache/$PACKAGE"
ipv4_default=1
have_ipv4="yes"
newrr="yes"
query_m="udponly"
have_tcp_server="yes"
adisc="default"
slock="no";
def_id="nobody"
have_rcsids="no"
udp_queries="yes"
tcp_queries="no"
tempdir="/tmp"
randomdev=default
freebsd_pthread="4"
specbuild=no
threadlib=linuxthreads

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

AM_CONFIG_HEADER(config.h)

AC_ARG_WITH(distribution,
[  --with-distribution=distro  Specify target distribution (default=Generic;
                              others: RedHat, SuSE, Debian)],
  distribution=$withval)
AC_SUBST(distribution)

AC_ARG_WITH(target,
[  --with-target=platform      Change compilation target platform (default: 
			      autodetect; others: Linux, BSD, Cygwin)],
  target=$withval)
case $target in
  Linux|linux) 
    AC_DEFINE(TARGET, TARGET_LINUX) 
    target="Linux"
    ;;
  BSD| bsd)
    AC_DEFINE(TARGET, TARGET_BSD)
    target="BSD"
    ;;
  Cygwin|CYGWIN|cygwin)
    AC_DEFINE(TARGET, TARGET_CYGWIN)
    target="cygwin"
    ;;
  autodetect)
    ;;
  *)
    AC_MSG_ERROR([--with-target must have Linux, BSD or Cygwin as parameter.])
    ;;
esac

AC_ARG_WITH(cachedir,
[  --with-cachedir=dir         Default directory for pdnsd cache 
                              (default=/var/cache/pdnsd)],
  cachedir=$withval)
AC_DEFINE_UNQUOTED(CACHEDIR, "$cachedir")
AC_SUBST(cachedir)

AC_ARG_ENABLE(isdn,
[  --enable-isdn               Enable ISDN support (may cause problems on 
                              some systems; only for Linux)],
  test $enableval = "yes" && AC_DEFINE(ISDN_SUPPORT))

AC_ARG_ENABLE(ipv4,
[  --disable-ipv4              Disable IPv4 networking support 
                              (default=enabled)],
  have_ipv4=$enableval)

test $have_ipv4 = "yes" && AC_DEFINE(ENABLE_IPV4)

AC_ARG_ENABLE(ipv6,
[  --enable-ipv6               Enable IPv6 networking support],
[ if test $enableval = "yes" ; then
    AC_DEFINE(ENABLE_IPV6)
    if test $have_ipv4 != "yes" ; then
      ipv4_default=0	
    fi
  fi])
  
AC_ARG_ENABLE(ipv4-startup,
[  --disable-ipv4-startup      Disable IPv4 on pdnsd startup by default
                              (default=enabled)],
[ if test $enableval = "yes" ; then
    ipv4_default=1
  else
    ipv4_default=0
  fi])

AC_ARG_ENABLE(ipv6-startup,
[  --enable-ipv6-startup       Enable IPV6 on pdnsd startup by default
                              (default=IPv4)],
[ if test $enableval = "yes" ; then
    ipv4_default=0
  else 
    ipv4_default=1
  fi])

AC_DEFINE_UNQUOTED(DEFAULT_IPV4, $ipv4_default)
 
AC_ARG_ENABLE(udp-queries,
[  --disable-udp-queries       Disable udp as query method.],
  udp_queries=$enableval)

AC_ARG_ENABLE(tcp-queries,
[  --enable-tcp-queries        Enable tcp as query method.],
  tcp_queries=$enableval)

AC_ARG_WITH(query-method,
[  --with-query-method=qm      Specify the query method (default=udponly;
                              others: tcpudp, tcponly)],
  query_m=$withval)
case $query_m in
  udponly|UDPonly) 
    AC_DEFINE(M_PRESET, UDP_ONLY)
    udp_queries=yes;
    ;;
  tcponly|TCPonly) 
    AC_DEFINE(M_PRESET, TCP_ONLY) 
    tcp_queries=yes;
    ;;
  tcpudp|TCPUDP) 
    AC_DEFINE(M_PRESET, TCP_UDP) 
    udp_queries=yes;
    tcp_queries=yes;
    ;;
  *)
    AC_MSG_ERROR([--with-query-method must have udponly, tcpudp or tcponly as parameter.])
    ;;
esac

test $udp_queries != "yes" && AC_DEFINE(NO_UDP_QUERIES)
test $tcp_queries != "yes" && AC_DEFINE(NO_TCP_QUERIES)

AC_ARG_ENABLE(tcp-server,
[  --disable-tcp-server        Enable the TCP serving ability of pdnsd],
  have_tcp_server=$enableval)

test $have_tcp_server != "yes" && AC_DEFINE(NO_TCP_SERVER)

AC_ARG_ENABLE(src-addr-disc,
[  --disable-src-addr-disc     Disable the UDP source address discovery],
    adisc=$enableval)

AC_ARG_ENABLE(socket-locking,
[  --enable-socket-locking     Enable the UDP socket locking],
    slock=$enableval)

test $slock = "yes" && AC_DEFINE(SOCKET_LOCKING)

AC_ARG_ENABLE(poll,
[  --disable-poll              Disable poll(2) and use select(2)
                              (default=enabled)],
   test $enableval != "yes" && AC_DEFINE(NO_POLL))
  
AC_ARG_ENABLE(new-rrs,
[  --disable-new-rrs           Disable new DNS RR types, may cause problems
			      with some resolvers],
   newrr=$enableval)
  
test $newrr = "yes" && AC_DEFINE(DNS_NEW_RRS)

AC_ARG_ENABLE(strict-rfc2181,
[  --enable-strict-rfc2181     Enforce strict RFC 2181 compliance],
   test $enableval = "yes" && AC_DEFINE(RFC2181_ME_HARDER))
  
AC_ARG_WITH(random-device,
[  --with-random-device=device Specify random device other than 
                              /dev/random; default: C Library random() PRNG;
			      special value arc4random for BSD C Library
			      arc4random function (default on FreeBSD)],
   randomdev=$withval)

if test "$randomdev" = arc4random ; then
	AC_DEFINE(R_ARC4RANDOM)  
elif test "$randomdev" = random ; then
	AC_DEFINE(R_RANDOM)
elif test "$randomdev" = default ; then
	AC_DEFINE(R_DEFAULT)
else
	AC_DEFINE_UNQUOTED(RANDOM_DEVICE, "$randomdev")  
fi

AC_ARG_ENABLE(underscores,
[  --enable-underscores        Allow _ in domain names],
   test $enableval = "yes" && AC_DEFINE(UNDERSCORE))

AC_ARG_WITH(default-id,
[  --with-default-id=id        Specify default uid/gid for pdnsd 
                              (default=nobody)],
  def_id=$withval)
AC_SUBST(def_id)
  
AC_ARG_WITH(debug,
[  --with-debug=level          Specify debugging level],
  AC_DEFINE_UNQUOTED(DEBUG, $withval))
  
AC_ARG_WITH(verbosity,
[  --with-verbosity=level      Specify default message verbosity],
  AC_DEFINE_UNQUOTED(VERBOSITY, $withval))
  
AC_ARG_ENABLE(hash-debug,
[  --enable-hash-debug         Debug hash tables (warning: massive output)],
  test $enableval = "yes" && AC_DEFINE(DEBUG_HASH))
  
AC_ARG_ENABLE(yy-debug,
[  --enable-yy-debug           Debug config file parser],
  test $enableval = "yes" && AC_DEFINE(DEBUG_YY))

AC_ARG_ENABLE(rcsids,
[  --enable-rcsids             Enable RCS IDs in executables (default=disabled)],
  have_rcsids=$enableval)

test $have_rcsids != "yes" && AC_DEFINE(NO_RCSIDS)

AC_ARG_WITH(tcp-qtimeout,
[  --with-tcp-qtimeout=secs    Specify default tcp query timeout (default=30)],
  AC_DEFINE_UNQUOTED(TCP_TIMEOUT, $withval))

AC_ARG_ENABLE(tcp-subseq,
[  --enable-tcp-subseq         Enable multiple dns querys using one
			      tcp connection],
  test $enableval = "yes" && AC_DEFINE(TCP_SUBSEQ))

AC_ARG_WITH(par-queries,
[  --with-par-queries=num      Specify default parallel query number (default=2)],
  AC_DEFINE_UNQUOTED(PAR_QUERIES, $withval))

AC_ARG_ENABLE(specbuild,
[  --enable-specbuild          Only used when build pdnsd from spec files],
  specbuild=$enableval)

AC_SUBST(specbuild)

AC_ARG_WITH(thread-lib,
[  --with-thread-lib=lib       Specify thread library (for Linux only).
			      Possible values: LinuxThreads (default),
			      LinuxThreads2 (implements a fix for newer glibcs)
			      or NPTL (Native POSIX Thread Library)],
  threadlib=$withval)

if test "$threadlib" = nptl -o "$threadlib" = NPTL; then
	AC_DEFINE(THREADLIB_NPTL)  
elif test "$threadlib" = linuxthreads2 -o "$threadlib" = LinuxThreads2 -o "$threadlib" = lt2; then
	AC_DEFINE(THREADLIB_LINUXTHREADS2)  
fi


dnl Checks for programs.
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL

dnl For dbm subsystem libraries
AC_PROG_RANLIB

if test "$target" = "autodetect" ; then
  AC_MSG_CHECKING([for autodetect build target])
  uname_sys=`uname`
  if test $? -ne 0 ; then
    AC_MSG_RESULT([failed])
    AC_MSG_ERROR([uname failed or was not found in path])
  else
    case "${uname_sys}" in
    Linux)
      AC_MSG_RESULT(Linux)
      AC_DEFINE(TARGET, TARGET_LINUX)
      target="Linux"
      ;;
    FreeBSD|NetBSD|OpenBSD)
      AC_MSG_RESULT("${uname_sys}")
      AC_DEFINE(TARGET, TARGET_BSD)
      target="BSD"
      ;;
    CYGWIN*)
      AC_MSG_RESULT("${uname_sys}")
      AC_DEFINE(TARGET, TARGET_CYGWIN)
      target="cygwin"
      ;;
    *)
      AC_MSG_RESULT([failed])
      AC_MSG_ERROR(
[Your system type could not be identified. Try setting it manually using 
--with-target])
      ;;
    esac	
  fi
fi

#if test "$target" = BSD ; then
#  uname_sys=`uname`
#  if test "$uname_sys" = FreeBSD ; then
#    AC_MSG_CHECKING([for FreeBSD version])
#    osrel=`sysctl -n kern.osreldate`
#    if test $osrel -ge 500016 ; then
#      AC_MSG_RESULT([5.0 (>= 500016)])
#      freebsd_pthread="5"
#    else
#      AC_MSG_RESULT([<=5.0 (< 500016)])
#      freebsd_pthread="4"
#    fi
#  fi
#fi	

if test "$adisc" = "default"; then
  if test "$target" = "cygwin" ; then
# Don't do UDP source address discovery on Cygwin platform by default.
    adisc="no"
  else
    adisc="yes"
  fi  
fi

test "$adisc" = "yes" && AC_DEFINE(SRC_ADDR_DISC)


dnl Checks for libraries.
if test "$target" = "Linux"; then
  AC_CHECK_LIB(pthread, pthread_kill)
fi
if test "$target" = "BSD" ; then
#  if test $freebsd_pthread = 4 ; then
    CFLAGS="$CFLAGS -pthread"
    AC_SUBST(CFLAGS)
#  else
#    AC_CHECK_LIB(c_r, pthread_kill, , 
#      AC_MSG_ERROR([You must have libc_r installed to build/run pdnsd!]))
#  fi;
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h malloc.h sys/ioctl.h sys/time.h syslog.h unistd.h netinet/in.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_MSG_CHECKING([for structure in_pktinfo])
pktinfo_struct="no"
AC_TRY_COMPILE([#include <netinet/in.h>], [struct in_pktinfo pi;], 
  pktinfo_struct="yes", 
  AC_DEFINE(NO_IN_PKTINFO))

if test [ "$pktinfo_struct" = "yes" ]; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
  
dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(nanosleep gettimeofday mkfifo select socket strerror uname snprintf vsnprintf, true, 
		AC_MSG_ERROR([One of the functions required for pdnsd were not found.]))
AC_CHECK_FUNCS(poll, true, AC_DEFINE(NO_POLL))
AC_CHECK_FUNCS(strdup strndup stpcpy stpncpy strlcpy mempcpy getline asprintf vasprintf getpwnam_r inet_ntop)

AC_OUTPUT([
pdnsd.spec
Makefile
file-list.base
contrib/Makefile
doc/Makefile
doc/pdnsd.8
doc/pdnsd.conf.5
doc/pdnsd.conf
src/Makefile
src/pdnsd-ctl/Makefile
src/rc/Makefile
src/rc/RedHat/Makefile
src/rc/RedHat/pdnsd
src/rc/SuSE/Makefile
src/rc/SuSE/pdnsd
src/rc/Debian/Makefile
src/rc/Debian/pdnsd
src/rc/Slackware/rc.pdnsd
src/test/Makefile
])
